[1,["35YDCsHp5EiqAf7Ou8mznb@6c48a","0bEAoTy0hL/6TVv8s2S6CX"],["mainTexture","_effectAsset"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_states","_defines","_props"],0,12]],[[0,0,1,2,4],[1,0,1,2,3,4]],[[[[0,"../Perspex/Perspex",[{"hash":742844412,"name":"../Perspex/Perspex|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"MXD","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"resolution","type":14,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"MXD","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"resolution","type":14,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec4 color;\nin vec2 uv0;\nuniform sampler2D mainTexture;\nlayout(std140) uniform MXD {\n  vec4 mainColor;\n  vec2 resolution;\n};\n#if USE_TEXTURE\n  uniform sampler2D cc_spriteTexture;\n#endif\n#define iTime cc_time.x\n#define iResolution resolution\n#define FAR 2.\nint id = 0;\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){\n  n = max((abs(n) - .2), .001);\n  n /= (n.x + n.y + n.z );\n  p = (texture(tex, p.yz)*n.x + texture(tex, p.zx)*n.y + texture(tex, p.xy)*n.z).xyz;\n  return p*p;\n}\nfloat n3D(vec3 p){\n  const vec3 s = vec3(7, 157, 113);\n  vec3 ip = floor(p); p -= ip;\n  vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n  p = p*p*(3. - 2.*p);\n  h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n  h.xy = mix(h.xz, h.yw, p.y);\n  return mix(h.x, h.y, p.z);\n}\nvec2 hash22(vec2 p) {\n  float n = sin(dot(p, vec2(41, 289)));\n  p = fract(vec2(262144, 32768)*n);\n  return sin( p*6.2831853 + iTime )*.45 + .5;\n}\nfloat Voronoi(in vec2 p){\n  vec2 g = floor(p), o; p -= g;\n  vec3 d = vec3(1);\n  for(int y = -1; y <= 1; y++){\n    for(int x = -1; x <= 1; x++){\n      o = vec2(x, y);\n      o += hash22(g + o) - p;\n      d.z = dot(o, o);\n      d.y = max(d.x, min(d.y, d.z));\n      d.x = min(d.x, d.z);\n    }\n  }\n  return max(d.y/1.2 - d.x*1., 0.)/1.2;\n}\nfloat heightMap(vec3 p){\n  id =0;\n  float c = Voronoi(p.xy*4.);\n  if (c<.07) {c = smoothstep(0.7, 1., 1.-c)*.2; id = 1; }\n  return c;\n}\nfloat m(vec3 p){\n  float h = heightMap(p);\n  return 1. - p.z - h*.1;\n}\nvec3 nr(vec3 p, inout float edge) {\n  vec2 e = vec2(.005, 0);\n  float d1 = m(p + e.xyy), d2 = m(p - e.xyy);\n  float d3 = m(p + e.yxy), d4 = m(p - e.yxy);\n  float d5 = m(p + e.yyx), d6 = m(p - e.yyx);\n  float d = m(p)*2.;\n  edge = abs(d1 + d2 - d) + abs(d3 + d4 - d) + abs(d5 + d6 - d);\n  edge = smoothstep(0., 1., sqrt(edge/e.x*2.));\n  return normalize(vec3(d1 - d2, d3 - d4, d5 - d6));\n}\nvec3 eMap(vec3 rd, vec3 sn){\n  vec3 sRd = rd;\n  rd.xy -= iTime*.25;\n  rd *= 3.;\n  float c = n3D(rd)*.57 + n3D(rd*2.)*.28 + n3D(rd*4.)*.15;\n  c = smoothstep(0.5, 1., c);\n  vec3 col = vec3(min(c*1.5, 1.), pow(c, 2.5), pow(c, 12.)).zyx;\n  return mix(col, col.yzx, sRd*.25+.25);\n}\nvec4 frag() {\n  vec4  c = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    c *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n  #endif\n  vec2 u = uv0 * resolution;\n  vec3 r = normalize(vec3(u - iResolution.xy*.5, iResolution.y)),\n  o = vec3(0), l = o + vec3(0, 0, -1);\n  vec2 a = sin(vec2(1.570796, 0) + iTime/8.);\n  r.xy = mat2(a, -a.y, a.x) * r.xy;\n  float d, t = 0.;\n  for(int i=0; i<32;i++){\n    d = m(o + r*t);\n    if(abs(d)<0.001 || t>FAR) break;\n    t += d*.7;\n  }\n  t = min(t, FAR);\n  c = vec4(0);\n  float edge = 0.;\n  if(t<FAR){\n    vec3 p = o + r*t, n = nr(p, edge);\n    l -= p;\n    d = max(length(l), 0.001);\n    l /= d;\n    float hm = heightMap(p);\n    vec3 tx = tex3D(mainTexture, (p*2. + hm*.2), n);\n    c.xyz = vec3(1.)*(hm*.8 + .2);\n    c.xyz *= vec3(1.5)*tx;\n    c.x = dot(c.xyz, vec3(.299, .587, .114));\n    if (id==0) c.xyz *= vec3(min(c.x*1.5, 1.), pow(c.x, 5.), pow(c.x, 24.))*2.;\n    else c.xyz *= .1;\n    float df = max(dot(l, n), 0.);\n    float sp = pow(max(dot(reflect(-l, n), -r), 0.), 32.);\n    if(id == 1) sp *= sp;\n    c.xyz = c.xyz*(df + .75) + vec3(1, .97, .92)*sp + vec3(.5, .7, 1)*pow(sp, 32.);\n    vec3 em = eMap(reflect(r, n), n);\n    if(id == 1) em *= .5;\n    c.xyz += em;\n    c.xyz *= 1. - edge*.8;\n    c.xyz *= 1./(1. + d*d*.125);\n  }\n  c = vec4(sqrt(clamp(c.xyz, 0., 1.)), 1.);\n  return c;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n#endif\nuniform highp vec4 cc_time;\nvarying vec4 color;\nvarying vec2 uv0;\nuniform sampler2D mainTexture;\n  uniform vec2 resolution;\n#if USE_TEXTURE\n  uniform sampler2D cc_spriteTexture;\n#endif\n#define iTime cc_time.x\n#define iResolution resolution\n#define FAR 2.\nint id = 0;\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){\n  n = max((abs(n) - .2), .001);\n  n /= (n.x + n.y + n.z );\n  p = (texture2D(tex, p.yz)*n.x + texture2D(tex, p.zx)*n.y + texture2D(tex, p.xy)*n.z).xyz;\n  return p*p;\n}\nfloat n3D(vec3 p){\n  const vec3 s = vec3(7, 157, 113);\n  vec3 ip = floor(p); p -= ip;\n  vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n  p = p*p*(3. - 2.*p);\n  h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n  h.xy = mix(h.xz, h.yw, p.y);\n  return mix(h.x, h.y, p.z);\n}\nvec2 hash22(vec2 p) {\n  float n = sin(dot(p, vec2(41, 289)));\n  p = fract(vec2(262144, 32768)*n);\n  return sin( p*6.2831853 + iTime )*.45 + .5;\n}\nfloat Voronoi(in vec2 p){\n  vec2 g = floor(p), o; p -= g;\n  vec3 d = vec3(1);\n  for(int y = -1; y <= 1; y++){\n    for(int x = -1; x <= 1; x++){\n      o = vec2(x, y);\n      o += hash22(g + o) - p;\n      d.z = dot(o, o);\n      d.y = max(d.x, min(d.y, d.z));\n      d.x = min(d.x, d.z);\n    }\n  }\n  return max(d.y/1.2 - d.x*1., 0.)/1.2;\n}\nfloat heightMap(vec3 p){\n  id =0;\n  float c = Voronoi(p.xy*4.);\n  if (c<.07) {c = smoothstep(0.7, 1., 1.-c)*.2; id = 1; }\n  return c;\n}\nfloat m(vec3 p){\n  float h = heightMap(p);\n  return 1. - p.z - h*.1;\n}\nvec3 nr(vec3 p, inout float edge) {\n  vec2 e = vec2(.005, 0);\n  float d1 = m(p + e.xyy), d2 = m(p - e.xyy);\n  float d3 = m(p + e.yxy), d4 = m(p - e.yxy);\n  float d5 = m(p + e.yyx), d6 = m(p - e.yyx);\n  float d = m(p)*2.;\n  edge = abs(d1 + d2 - d) + abs(d3 + d4 - d) + abs(d5 + d6 - d);\n  edge = smoothstep(0., 1., sqrt(edge/e.x*2.));\n  return normalize(vec3(d1 - d2, d3 - d4, d5 - d6));\n}\nvec3 eMap(vec3 rd, vec3 sn){\n  vec3 sRd = rd;\n  rd.xy -= iTime*.25;\n  rd *= 3.;\n  float c = n3D(rd)*.57 + n3D(rd*2.)*.28 + n3D(rd*4.)*.15;\n  c = smoothstep(0.5, 1., c);\n  vec3 col = vec3(min(c*1.5, 1.), pow(c, 2.5), pow(c, 12.)).zyx;\n  return mix(col, col.yzx, sRd*.25+.25);\n}\nvec4 frag() {\n  vec4  c = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    c *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n  #endif\n  vec2 u = uv0 * resolution;\n  vec3 r = normalize(vec3(u - iResolution.xy*.5, iResolution.y)),\n  o = vec3(0), l = o + vec3(0, 0, -1);\n  vec2 a = sin(vec2(1.570796, 0) + iTime/8.);\n  r.xy = mat2(a, -a.y, a.x) * r.xy;\n  float d, t = 0.;\n  for(int i=0; i<32;i++){\n    d = m(o + r*t);\n    if(abs(d)<0.001 || t>FAR) break;\n    t += d*.7;\n  }\n  t = min(t, FAR);\n  c = vec4(0);\n  float edge = 0.;\n  if(t<FAR){\n    vec3 p = o + r*t, n = nr(p, edge);\n    l -= p;\n    d = max(length(l), 0.001);\n    l /= d;\n    float hm = heightMap(p);\n    vec3 tx = tex3D(mainTexture, (p*2. + hm*.2), n);\n    c.xyz = vec3(1.)*(hm*.8 + .2);\n    c.xyz *= vec3(1.5)*tx;\n    c.x = dot(c.xyz, vec3(.299, .587, .114));\n    if (id==0) c.xyz *= vec3(min(c.x*1.5, 1.), pow(c.x, 5.), pow(c.x, 24.))*2.;\n    else c.xyz *= .1;\n    float df = max(dot(l, n), 0.);\n    float sp = pow(max(dot(reflect(-l, n), -r), 0.), 32.);\n    if(id == 1) sp *= sp;\n    c.xyz = c.xyz*(df + .75) + vec3(1, .97, .92)*sp + vec3(.5, .7, 1)*pow(sp, 32.);\n    vec3 em = eMap(reflect(r, n), n);\n    if(id == 1) em *= .5;\n    c.xyz += em;\n    c.xyz *= 1. - edge*.8;\n    c.xyz *= 1./(1. + d*d*.125);\n  }\n  c = vec4(sqrt(clamp(c.xyz, 0., 1.)), 1.);\n  return c;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":45}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"}]}],[{"passes":[{"program":"../Perspex/Perspex|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"mainTexture":{"value":"white","type":28},"mainColor":{"type":16,"value":[1,1,1,1]},"alphaThreshold":{"type":13,"value":[0.5]},"resolution":{"type":14,"value":[960,640]}}}]}]]],0,0,[],[],[]],[[[1,"Perspex",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"SAMPLE_FROM_RT":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[0,1],[0,1]]]]
